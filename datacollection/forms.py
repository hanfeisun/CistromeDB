from django import forms
import sys
import models
from new import classobj

#a trick to get the current module
_modname = globals()['__name__']
_this_mod = sys.modules[_modname]

def FormFactory(name, model):
    return classobj(name, (forms.ModelForm,),
                    {'Meta': classobj('Meta',(),{'model':model})})

#we should iterate over the models and auto generate these
form_dict = {'Paper': models.Papers, 'Dataset': models.Datasets,
             'Platform': models.Platforms,
             'Factor': models.Factors, 'Celltype':models.CellTypes,
             'Cellline': models.CellLines, 'Cellpop':models.CellPops,
             'Strain': models.Strains, 'Condition':models.Conditions,
             'Journal': models.Journals, 'Species':models.Species,
             'Filetype': models.FileTypes,
             'Assembly': models.Assemblies, 'Sample':models.Samples,
             'Diseasestate': models.DiseaseStates}


for k in form_dict:
    #tmp = FormFactory(k+'Form', form_dict[k])
    #HACK! instead of PlatformForm = ... we do this
    #WOW! this works!
    setattr(_this_mod, k+'Form',
            FormFactory(k+'Form', form_dict[k]))

#OVERWRITE our autogenerated one!
class PaperForm(forms.ModelForm):
    class Meta:
        model = models.Papers
        exclude = ('date_collected', 'user', 'status', 'comments')

#class DatasetForm(forms.ModelForm):
class SampleForm(forms.ModelForm):
     class Meta:
         model = models.Samples
         exclude = ('date_collected', 'user', 'paper',
                    'raw_file', 'raw_file_type', 'raw_file_url',
                    'treatment_file', 'peak_file', 'wig_file', 'bw_file',
                    'assembly', 'description', 'comments', 'status',
                    'uploader', 'upload_date', 'curator')

#class SampleForm(forms.ModelForm):
class DatasetForm(forms.ModelForm):
    class Meta:
        model = models.Datasets
        #exclude = ('user', 'paper', 'treatments', 'controls')

#Used by the data team to upload dataset files
#class UploadDatasetForm(forms.ModelForm):
class UploadSampleForm(forms.ModelForm):
    class Meta:
        model = models.Samples
        #NOTE: for some reason fields isn't working, try exclude instead
        fields = ('raw_file', 'treatment_file', 'peak_file', 'wig_file',
                  'bw_file',
                  )
        exclude = tuple([f.name for f in model._meta.fields \
                         if f.name not in fields])
        #exclude = ('gsmid', 'name', 'chip_page', 'control_gsmid',
        #           'control_page', 'date_collected', 'raw_file_url',
        #           'raw_file_type', 'user', 'paper', 'factor', 'platform',
        #           'species', 'assembly', 'description', 'cell_type',
        #           'cell_line', 'cell_pop', 'strain', 'condition', 'status',
        #           'comments', 'uploader', 'upload_date')

#We want full control over ALL fields for the update forms
class UpdatePaperForm(forms.ModelForm):
    class Meta:
        model = models.Papers

#class UpdateDatasetForm(forms.ModelForm):
class UpdateSampleForm(forms.ModelForm):
    class Meta:
        model = models.Samples
        #Don't include the files--use the Upload form for that
        exclude = UploadSampleForm.Meta.fields
        exclude = exclude + ("raw_file_url", "raw_file_type", )
    
    #NOTE: if you get validating errs, you can override the validators like
    # def clean_raw_file_type(self):
    #      """IF we don't define this, it complains that the ftp:// URLS
    #      we give are invalid
    #      """
    #      cleaned_data = self.cleaned_data["raw_file_type"]
    #      #raise forms.ValidationError("FOOBAR!")
    #      return cleaned_data

#class BatchUpdateSamplesForm(forms.ModelForm):
class BatchUpdateDatasetsForm(forms.ModelForm):
    class Meta:
        model = models.Datasets
        fields = ('factor', 'platform', 'species', 'assembly', 
                  'cell_type', 'cell_line',
                  'cell_pop', 'strain', 'condition', 'disease_state',
                  'status', 'comments',
                  'user', 'uploader', #'curator', 
                  'description', 'chip_page', 'control_page',
                  'read_qc', 'model_qc', 'fold_qc', 'fdr_qc', 'replicate_qc',
                  'dnase_qc', 'velcro_qc', 'conserve_qc', 'ceas_qc', 
                  'motif_qc', 'overall_qc',
                  )
        exclude = tuple([f.name for f in model._meta.fields \
                         if f.name not in fields])
        #map fields to models
        form_dict = {'factor': models.Factors, 'platform': models.Platforms,
                     'species':models.Species, 'assembly': models.Assemblies,
                     'cell_type':models.CellTypes, 
                     'cell_line': models.CellLines, 'cell_pop':models.CellPops,
                     'strain': models.Strains, 'condition':models.Conditions,
                     'disease_state': models.DiseaseStates}

    #ORDER the select options by the field name--i.e. alphabetical order
    def __init__(self, *args, **kwargs):
        super(BatchUpdateDatasetsForm, self).__init__(*args, **kwargs)   
        for k in BatchUpdateDatasetsForm.Meta.form_dict:
            self.fields[k].queryset = BatchUpdateDatasetsForm.Meta.form_dict[k].objects.order_by('name')

#class UpdateSampleForm(forms.ModelForm):
class UpdateDatasetForm(forms.ModelForm):
    class Meta:
        model = models.Datasets
        fields = ('paper', 'treatments', 'controls', 'upload_date') + \
            BatchUpdateDatasetsForm.Meta.fields
        exclude = tuple([f.name for f in model._meta.fields \
                         if f.name not in fields])
    #ORDER the select options by the field name--i.e. alphabetical order
    def __init__(self, *args, **kwargs):
        super(UpdateDatasetForm, self).__init__(*args, **kwargs)   
        #NOTE: form_dict is not in this class!
        for k in BatchUpdateDatasetsForm.Meta.form_dict:
            self.fields[k].queryset = BatchUpdateDatasetsForm.Meta.form_dict[k].objects.order_by('name')

#class BatchUpdateDatasetsForm(forms.ModelForm):
class BatchUpdateSamplesForm(forms.ModelForm):
    class Meta:
        model = models.Samples
        fields = ('status', 'comments',
                  'user', 'uploader', 'curator', 
                  )
        exclude = tuple([f.name for f in model._meta.fields \
                         if f.name not in fields])


