/*
 * Forms.js
 * 
 * Copyright (c) Len Taing 2011
 *
 * Last Modified: 
 *
 * Description:
 * Problem: It's nice that Django (Model) forms can be auto-generated using 
 * something like this: {{ form.as_p }}.  But if we wanted to customize 
 * things, then we would have to expand this short-hand out and add in our 
 * custom code.
 *
 * Soln: it would be nice to keep the {{ form.as_p }} shorthand on the 
 * django side, which generates something like this:
 *
 * <p><label for="id_pmid">Pubmed ID:</label> <input type="text" name="pmid" id="id_pmid" /></p>
 * ...
 * We can save the parent (e.g. the p or td) for each input in the form by 
 * using the id, e.g. "id_pmid".  We to avoid out-of-sync errors, we can 
 * fetch the Model information using jsrecord's load fn.
 *
 */

/**
 * Function: ModelFormHooks
 * Description: Given a django Model, and a form autogenerated by the 
 * corresponding ModelForm, this class tries to automatically find the 
 * containers for all of the input fields and returns them as a hashtable.
 * 
 * Example:
 * The following is generated by django for the PapersModelForm.
 * <p><label for="id_pmid">Pubmed ID:</label> <input type="text" name="pmid" id="id_pmid" /></p>
 * 
 * var foo = ModelFormHooks("Papers");
 * foo['pmid'] == [the p containing pmid]
 *
 * @param: model - django model we want to hook into
 */
function ModelFormHooks(model) {
    this.returnVal = null;
    var outer = this;
    
    this.callback = function(req) {
	resp = eval(req.responseText);
	//alert(req.responseText);
	var tmp = {}
	for (var i = 0; i < resp.fields.length; i++) {
	    try {
		//alert(resp.fields[i]);
		var input = $("id_"+resp.fields[i]);
		tmp[resp.fields[i]] = input.parentNode;
		//alert(tmp[resp.fields[i]]);
	    } catch (ignored) {}
	}
	outer.returnVal = tmp;
    }
    
    //NOTE/WARNING: we are making a serialized ajax call--its not rec. but
    //this is the only way i can get it to block
    var tmp = 
	new Ajax.Request(SUB_SITE+"jsrecord/load/"+model+"/", 
			 {method:"get", onSuccess: outer.callback, 
				 asynchronous:false});
    
    return this.returnVal;
}

